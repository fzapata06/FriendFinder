const stripe = require('stripe')('pk_live_alyEi3lN0kSwbdevK0nrGwTw');

const Now = require('../lib');

module.exports = class CreditCards extends Now {
  ls() {return __async(function*(){
    const res = yield this._fetch('/www/user/cards');
    const body = yield res.json();

    return body;
  }.call(this))}

  setDefault(cardId) {return __async(function*(){
    yield this._fetch('/www/user/cards/default', {
      method: 'PUT',
      body: { cardId }
    });
    return true;
  }.call(this))}

  rm(cardId) {return __async(function*(){
    yield this._fetch(`/www/user/cards/${encodeURIComponent(cardId)}`, {
      method: 'DELEtE'
    });
    return true;
  }.call(this))}

  /* eslint-disable camelcase */
  add(card) {
    return new Promise((resolve, reject) => __async(function*(){
      const expDateParts = card.expDate.split(' / ');
      card = {
        name: card.name,
        number: card.cardNumber,
        cvc: card.ccv,
        address_country: card.country,
        address_zip: card.zipCode,
        address_state: card.state,
        address_city: card.city,
        address_line1: card.address1
      };

      card.exp_month = expDateParts[0];
      card.exp_year = expDateParts[1];

      try {
        const stripeToken = (yield stripe.tokens.create({ card })).id;
        const res = yield this._fetch('/www/user/cards', {
          method: 'POST',
          body: { stripeToken }
        });

        const body = yield res.json();

        if (body.card && body.card.id) {
          resolve({
            last4: body.card.last4
          });
        } else if (body.error && body.error.message) {
          reject(new Error(body.error.message));
        } else {
          reject(new Error('Unknown error'));
        }
      } catch (err) {
        reject(new Error(err.message || 'Unknown error'));
      }
    }.call(this)));
  }
};

function __async(g){return new Promise(function(s,j){function c(a,x){try{var r=g[x?"throw":"next"](a)}catch(e){j(e);return}r.done?s(r.value):Promise.resolve(r.value).then(c,d)}function d(e){c(e,1)}c()})}
